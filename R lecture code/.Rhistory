tests_by_dose <- rbind(tests_by_dose, data.frame(dose = d, t = t_test$statistic,
std.err = t_test$stderr,
p.value = t_test$p.value))
}
tests_by_dose
message("t-test: OJ vs VC, dose", d, "is significant")
message("t-test: OJ vs VC, dosage: ", d, " is significant")
message("t-test: OJ vs VC, dosage: ", d, " mg/day is significant")
message("t-test: OJ vs VC. dosage = ", d, " mg/day is significant")
message("Dosage = ", d, " mg/day: t-test comparing OJ and VC supplement group is significant")
message("Dosage = ", d, " mg/day: significant (p = ", t_test$p.value, ")")
# t-test between supplement in each dosage
tests_by_dose <- data.frame()
for (d in c(0.5, 1, 2)) {
t_test <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE,
data = subset(ToothGrowth, dose == d), alternative = "two.sided")
tests_by_dose <- rbind(tests_by_dose, data.frame(dose = d, t = t_test$statistic,
std.err = t_test$stderr,
p.value = t_test$p.value))
if(t_test$p.value < 0.05)
{
message("Dosage = ", d, " mg/day: significant (p = ", t_test$p.value, ")")
} else {
message("Dosage = ", d, " mg/day: insignificant (p = ", t_test$p.value, ")")
}
}
tests_by_dose
subset(ToothGrowth, dose == d)
dat_sub
dat_sub <- subset(ToothGrowth, dose == d)
dat_sub
# t-test between supplement in each dosage
tests_by_dose <- data.frame()
for (d in c(0.5, 1, 2))
{
dat_sub <- subset(ToothGrowth, dose == d)
t_test <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE,
data = dat_sub, alternative = "two.sided")
tests_by_dose <- rbind(tests_by_dose, data.frame(dose = d,
mean_len_OJ = mean(dat_sub$len[dat_sub$supp == "OJ"]),
mean_len_VC = mean(dat_sub$len[dat_sub$supp == "VC"]),
t = t_test$statistic,
std.err = t_test$stderr,
p.value = t_test$p.value))
if(t_test$p.value < 0.05)
{
message("Dosage = ", d, " mg/day: significant (p = ", t_test$p.value, ")")
} else {
message("Dosage = ", d, " mg/day: insignificant (p = ", t_test$p.value, ")")
}
}
tests_by_dose
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
facets=~dose,
main="Tooth growth of guinea pigs by supplement type and dosage (mg)",
xlab="Supplement type",
ylab="Tooth length") + geom_boxplot(aes(fill = supp))
par(mfrow = c(1,3))
with(subset(ToothGrowth, dose=="0.5"),boxplot(len ~ supp, main="0.5 mg/day", ylab="Length"))
with(subset(ToothGrowth, dose=="1"), boxplot(len ~ supp, main="1 mg/day", ylab="Length"))
with(subset(ToothGrowth, dose=="2"), boxplot(len ~ supp, main="2 mg/day", ylab="Length"))
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
facets=~dose,
main="Tooth growth of guinea pigs by supplement type and dosage (mg)",
xlab="Supplement type",
ylab="Tooth length") + geom_boxplot(aes(fill = supp))
# t-test between supplement in each dosage
ttestsByDose <- data.frame()
for (d in c(0.5, 1, 2))
{
datSub <- subset(ToothGrowth, dose == d)
tTest <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE,
data = datSub, alternative = "two.sided")
ttestsByDose <- rbind(ttestsByDose, data.frame(dose = d,
mean_len_OJ = mean(datSub$len[datSub$supp == "OJ"]),
mean_len_VC = mean(datSub$len[datSub$supp == "VC"]),
t = tTest$statistic,
std_err = tTest$stderr,
p_value = tTest$p.value))
if(tTest$p.value < 0.05)
{
message("Dosage = ", d, " mg/day: significant (p = ", tTest$p.value, ")")
} else {
message("Dosage = ", d, " mg/day: insignificant (p = ", tTest$p.value, ")")
}
}
ttestsByDose
library(tidyquant)
library(crayon)
source("C:/Users/y-zhe/OneDrive/Desktop/STOCK/Stock_Toolkit_Functions.R")
ps_database <- baoge()
ps_database
while(1)
{
message(rep('-', 15), Sys.time(), rep('-', 15))
buysell_monitor(ps_database)
cat('\n')
Sys.sleep(10)
}
while(1)
{
message(rep('-', 15), Sys.time(), rep('-', 15))
buysell_monitor(ps_database)
cat('\n')
Sys.sleep(10)
}
while(1)
{
message(rep('-', 15), Sys.time(), rep('-', 15))
buysell_monitor(ps_database)
cat('\n')
Sys.sleep(10)
}
ps_database
while(1)
{
message(rep('-', 15), Sys.time(), rep('-', 15))
buysell_monitor(ps_database)
cat('\n')
Sys.sleep(10)
}
while(1)
{
message(rep('-', 15), Sys.time(), rep('-', 15))
buysell_monitor(ps_database)
cat('\n')
Sys.sleep(10)
}
source("C:/Users/y-zhe/OneDrive/Desktop/STOCK/Stock_Toolkit_Functions.R")
while(1)
{
message(rep('-', 15), Sys.time(), rep('-', 15))
buysell_monitor(ps_database)
cat('\n')
Sys.sleep(10)
}
source("C:/Users/y-zhe/OneDrive/Desktop/STOCK/Stock_Toolkit_Functions.R")
while(1)
{
message(rep('-', 15), Sys.time(), rep('-', 15))
buysell_monitor(ps_database)
cat('\n')
Sys.sleep(10)
}
library(ggplot2)
# Create data ----
170
"Adam"
TRUE
c(170, 178, 185)
c(74.7, 80.2, 72.5)
# load data from web
toothGrowth <- read.csv("https://raw.githubusercontent.com/YinanZheng/Yinan-R-Lecture/master/Data/ToothGrowth.csv")
toothGrowth
# load data from local
toothGrowth <- read.csv("")
toothGrowth
# Inspect data
head(toothGrowth)
dim(toothGrowth)
# Sample size in each supplement-dosage subgroups:
table(toothGrowth$supp, toothGrowth$dose)
# boxplot by supplement
par(mfrow = c(1,2))
with(subset(ToothGrowth, supp=="OJ"),
boxplot(len ~ dose, main="Orange Juice", xlab="Dosage (mg/day)", ylab="Length"))
with(subset(ToothGrowth, supp == "VC"),
boxplot(len ~ dose, main="Ascorbic Acid", xlab="Dosage (mg/day)", ylab="Length"))
# boxplot by dose
par(mfrow = c(1,3))
with(subset(ToothGrowth, dose=="0.5"),boxplot(len ~ supp, main="0.5 mg/day", ylab="Length"))
with(subset(ToothGrowth, dose=="1"), boxplot(len ~ supp, main="1 mg/day", ylab="Length"))
with(subset(ToothGrowth, dose=="2"), boxplot(len ~ supp, main="2 mg/day", ylab="Length"))
# A better plot using package: ggplot2
install.packages("ggplot2")
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
facets=~dose,
main="Tooth growth of guinea pigs by supplement type and dosage (mg)",
xlab="Supplement type",
ylab="Tooth length") + geom_boxplot(aes(fill = supp))
boxplot(len ~ supp, data=subset(ToothGrowth, dose=="0.5"), main="0.5 mg/day", ylab="Length")
# boxplot by dose (using R base graph functions)
par(mfrow = c(1,3))
boxplot(len ~ supp, data=subset(ToothGrowth, dose=="0.5"), main="0.5 mg/day", ylab="Length")
boxplot(len ~ supp, data=subset(ToothGrowth, dose=="1"), main="1.0 mg/day", ylab="Length")
boxplot(len ~ supp, data=subset(ToothGrowth, dose=="2"), main="2.0 mg/day", ylab="Length")
ToothGrowth$dose
str(toothGrowth)
# boxplot by dose (using R base graph functions)
par(mfrow = c(1,3))
boxplot(len ~ supp, data=subset(ToothGrowth, dose==0.5), main="0.5 mg/day", ylab="Length")
boxplot(len ~ supp, data=subset(ToothGrowth, dose==1), main="1.0 mg/day", ylab="Length")
boxplot(len ~ supp, data=subset(ToothGrowth, dose==2), main="2.0 mg/day", ylab="Length")
subset(ToothGrowth, dose==0.5)
# handy function to check missing data
is.na(c(1, 2, NA, 3))
# handy function to check missing data
x <- c(1, 2, NA, 3)
is.na(x)
# handy function to check missing data
x <- c(1, 2, NA, 3, 4, NA, 5, 6, 7, NA, 8, 9, NA, 10, 11, NA, 12)
is.na(x)
sum(is.na(x))
which(is.na(x))
x <- seq(1,10,0.1)
y <- sin(x)
plot(x, y)
# Vanilla R vs RStudio ----
x <- seq(1,10,0.1)
y <- sin(x)
plot(x, y)
# R data ----
170
"Adam"
TRUE
c(170, 178, 185)
c(74.7, 80.2, 72.5)
c("Adam", "Jack", "Tim")
c("74.7", "80.2", "72.5")
c(TRUE, FALSE, FALSE)
# RStudio makes it easier: if the name is colored by white completely, then it is a legit object name
num # correct
num1 # correct
.num1 # correct
num.
nu.m # correct
num. # correct
nu.m # correct
1num # wrong
nu m # wrong
nu+m # wrong
nu+m # wrong
nu_m # correct
# Assign data to R object (note the changes in "Environment" window)
# Short cut for <-: "Alt" + "-"
num1 <- c(170, 178, 185)
num2 <- c(74.7, 80.2, 72.5)
char1 <- c("Adam", "Jack", "Tim")
char2 <- c("74.7", "80.2", "72.5")
logi <- c(TRUE, FALSE, FALSE)
# Data object type and structure ----
# Three core data types: numeric, character, logical
class(num1)
class(num2)
class(char1)
class(char2)
class(logi)
# Data types can be coveted
as.character(num1)
as.numeric(char1) # does not work!
as.numeric(char2) # this works
as.numeric(logi)
as.logical(num1)
as.logical(c(0, 1, 0))
# by default NA is logical
class(NA)
# but NA can be any data type
class(as.character(NA))
class(as.numeric(NA))
c(1, 2, NA, 3)
c("Apple", NA, "Orange")
c(TRUE, NA, FALSE)
# handy functions to check missing data
x <- c(1, 2, NA, 3, 4, NA, 5, 6, 7, NA, 8, 9, NA, 10, 11, NA, 12)
is.na(x)
sum(is.na(x))
which(is.na(x))
# matrix:
# create matrix by function "matrix"
mat <- matrix(1:9, nrow = 3, ncol = 3)
# create matrix by binding vectors (by row or by column)
mat1 <- rbind(num1, num2)
mat1
class(mat1)
mat2 <- cbind(num1, num2)
i
n
# create matrix by binding vectors (by row or by column)
mat1 <- rbind(num1, num2)
mat1
class(mat1)
mat2 <- cbind(num1, num2)
mat2
class(mat2)
# matrix:
# create matrix by function "matrix"
mat <- matrix(1:9, nrow = 3, ncol = 3)
mat
class(mat)
c
c <- 1
c
# R data ----
170
# Inspect data
head(toothGrowth)
dim(toothGrowth)
# Assign data to R object (note the changes in "Environment" window)
# Short cut for <-: "Alt" + "-"
num1 <- c(170, 178, 185)
num2 <- c(74.7, 80.2, 72.5)
char1 <- c("Adam", "Jack", "Tim")
char2 <- c("74.7", "80.2", "72.5")
logi <- c(TRUE, FALSE, FALSE)
# Data object type ----
# Three core data types: numeric, character, logical
class(num1)
class(num2)
class(char1)
class(char2)
class(logi)
# Data types can be coveted using "as." commands
as.character(num1)
as.numeric(char1) # does not work!
as.numeric(char2) # this works
as.numeric(logi)
as.logical(num1)
as.logical(c(0, 1, 0))
# by default NA is logical
class(NA)
# but NA can be any data type
class(as.character(NA))
class(as.numeric(NA))
c(1, 2, NA, 3)
c("Apple", NA, "Orange")
c(TRUE, NA, FALSE)
# handy commands to check missing data
x <- c(1, 2, NA, 3, 4, NA, 5, 6, 7, NA, 8, 9, NA, 10, 11, NA, 12)
is.na(x)
sum(is.na(x))
which(is.na(x))
# matrix:
# create matrix by command "matrix"
mat <- matrix(1:9, nrow = 3, ncol = 3)
mat
class(mat)
# create matrix by binding vectors (by row or by column)
mat1 <- rbind(num1, num2)
mat1
class(mat1)
mat2 <- cbind(num1, num2)
mat2
class(mat2)
# you can combine number with characters BUT number will be forced to be character:
cbind(num1, char1)
cbind(char1, logi)
cbind(num1, logi) # logical data converted to 0/1 if bind with numeric
# data frame: (allows us to make a dataset with various data type!)
df <- data.frame(Name = char1, Height = num1, Weight = num2, Cancer = logi, stringsAsFactors = FALSE)
df
class(df)
# row names (not specified, by default 1:N will be generated)
rownames(df)
# column names (variable names)
colnames(df)
# use '$' sign to access variables in data frame (Note RStudio's variable name autocomplete)
df$Name
df$Height
df$Weight
df$Cancer
# or use variable name to access variable data
df[, "Name"]
# or use variable name to access variable data
df[, "Name"]
# data type of variable in data frame are not affecting others
class(df$Name)
class(df$Height)
class(df$Weight)
class(df$Cancer)
# Data preview
# head() and tail()
longVec <- 1:1000
head(longVec)
tail(longVec)
# More useful to inspect a dataset
longMat <- matrix(1:90, nrow = 30)
head(longMat)
tail(longMat)
longDf <- as.data.frame(longMat)
head(longDf)
tail(longDf)
dim(longDf)
nrow(longDf)
ncol(longDf)
# Subsetting
# subset using square brackets:
mat[2, 2]
mat[1:3, 1:2]
df[1, ] # first row, all columns
df[, 2] # all rows, second column
df[c(1,3), c(1,4)] # first and thrid rows, first and fourth columns
# subset using command "subset"
subset(df, Height > 175) # records for those who are taller than 175
subset(df, Cancer) # records for those who had cancer
# Add new a variable
df$Age <- c(76, 56, 62)
df
# Remove a variable
df$Age <- NULL
df
# Sum and Average
sum(df$Cancer)
mean(df$Height)
# Change variable names
colnames(df)[c(2,3)] <- c("Height_cm", "Weight_kg")
df
# “if” statement ----
x <- 5
x <- -2
if(x > 0)
{
print("x is positive")
} else {
print("x is not positive")
}
# “if” statement ----
x <- 5
if(x > 0)
{
print("x is positive")
} else {
print("x is not positive")
}
x <- -2
if(x > 0)
{
print("x is positive")
} else {
print("x is not positive")
}
# count even number in x:
x <- c(2,5,3,9,15,8,11,6,24,68,44,25,36,57,24,47,14,13,2,6,3,9,14,27,44)
count <- 0
x %% 2
x %% 2 == 0
sum(x %% 2 == 0)
calculate.BMI(75, 1.75)
calculate.BMI <- function(weight, height)
{
bmi <- weight/height^2
return(bmi)
}
# Run function
calculate.BMI(75, 1.75)
df$Weight_kg, df$Height_cm/100
# Create a BMI variable using our function
df$BMI <- calculate.BMI(df$Weight_kg, df$Height_cm/100)
df
subset(ToothGrowth, dose == 0.5)
# boxplot by dose (using R base graph functions)
par(mfrow = c(1,3))
boxplot(len ~ supp, data = subset(ToothGrowth, dose == 0.5), main = "0.5 mg/day", ylab = "Tooth length")
boxplot(len ~ supp, data = subset(ToothGrowth, dose == 1), main = "1.0 mg/day", ylab = "Tooth length")
boxplot(len ~ supp, data = subset(ToothGrowth, dose == 2), main = "2.0 mg/day", ylab = "Tooth length")
# A better plot using package: ggplot2
install.packages("ggplot2")
library(ggplot2)
qplot(supp, len, data = ToothGrowth,
facets = ~dose,
main = "Tooth growth of guinea pigs by supplement type and dosage (mg)",
xlab = "Supplement type",
ylab = "Tooth length") + geom_boxplot(aes(fill = supp))
# t-test between supplement in each dosage
ttestsByDose <- data.frame()
for (d in c(0.5, 1, 2))
{
# Subset data by dose
datSub <- subset(ToothGrowth, dose == d)
# Run t-test
tTest <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE,
data = datSub, alternative = "two.sided")
# combine results
ttestsByDose <- rbind(ttestsByDose, data.frame(dose = d,
mean_len_OJ = mean(datSub$len[datSub$supp == "OJ"]),
mean_len_VC = mean(datSub$len[datSub$supp == "VC"]),
t = tTest$statistic,
std_err = tTest$stderr,
p_value = tTest$p.value))
# use if statement to output significance
if(tTest$p.value < 0.05)
{
message("Dosage = ", d, " mg/day: significant (p = ", tTest$p.value, ")")
} else {
message("Dosage = ", d, " mg/day: insignificant (p = ", tTest$p.value, ")")
}
}
for (d in c(0.5, 1, 2))
{
# Subset data by dose
datSub <- subset(ToothGrowth, dose == d)
# Run t-test
tTest <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE,
data = datSub, alternative = "two.sided")
# combine results
ttestsByDose <- rbind(ttestsByDose, data.frame(dose = d,
mean_len_OJ = mean(datSub$len[datSub$supp == "OJ"]),
mean_len_VC = mean(datSub$len[datSub$supp == "VC"]),
t = tTest$statistic,
std_err = tTest$stderr,
p_value = tTest$p.value))
# use if statement to output significance
if(tTest$p.value < 0.05)
{
message("Dosage = ", d, " mg/day: t-test is significant (p = ", tTest$p.value, ")")
} else {
message("Dosage = ", d, " mg/day: t-test is not significant (p = ", tTest$p.value, ")")
}
}
ttestsByDose
